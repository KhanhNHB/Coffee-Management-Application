/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sample.application;

import java.awt.Color;
import java.awt.Font;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.util.Date;
import java.sql.SQLException;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import sample.accounts.AccountsDAO;
import sample.accounts.AccountsDTO;
import sample.foods.FoodsDAO;
import sample.foods.FoodsDTO;
import sample.foods.category.FoodCategoryDAO;
import sample.foods.category.FoodCategoryDTO;
import sample.statistics.StatisticsDAO;
import sample.statistics.StatisticsDTO;

/**
 *
 * @author hello
 */
public class Coffee extends javax.swing.JFrame {

    private Vector<String> headerTable;
    private Vector dataTable;

    private boolean checkPressButtonCreateNewCategory = false;
    private boolean checkPressButtonCreateNewAccount = false;
    private boolean checkPressButtonCreateNewProduct = false;

    private List<FoodsDTO> listFoodSearchByName;

    private StatisticsDAO daoStatistics;
    private List<StatisticsDTO> listStatistics;
    private DefaultTableModel statisticsModel;

    private List<FoodCategoryDTO> listCategory;
    private FoodCategoryDTO dtoFoodCategory;
    private FoodCategoryDAO daoFoodCategory;
    private DefaultTableModel categoryModel;

    private List<FoodsDTO> listFoods;
    private FoodsDAO daoFoods;
    private FoodsDTO dtoFoods;
    private DefaultTableModel listFoodsModel;

    private List<AccountsDTO> listAccounts;
    private AccountsDAO daoAccounts;
    private AccountsDTO dtoAccounts;
    private DefaultTableModel accountModel;

    public Coffee(AccountsDTO dtoAccounts) {
        initComponents();
        setLocationRelativeTo(null);
        this.setVisible(true);
        this.dtoAccounts = dtoAccounts;

        loadStatistics();
        load();
    }

    public Coffee() {
        initComponents();
        setLocationRelativeTo(null);
        this.setVisible(true);
    }

    private void load() {
        loadTableAccount();
        loadListFood();
        loadCategory();
        loadTextFocusSearch();
    }

    private void loadStatistics() {
        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("MM/dd/YYYY");
        LocalDate localDate = LocalDate.now();

        LocalDate startDate = localDate.withDayOfMonth(1);
        LocalDate endDate = localDate.withDayOfMonth(localDate.lengthOfMonth());

        String fromD = dtf.format(startDate);
        String toD = endDate.getMonthValue() + "/" + endDate.getDayOfMonth() + "/" + startDate.getYear();

        Date fromDate = new Date(fromD);
        Date toDate = new Date(toD);

        loadStatisticsList(fromDate, toDate);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlWrapperTablePaneAdmin = new javax.swing.JPanel();
        tblWrapperMain = new javax.swing.JTabbedPane();
        pnlRevenue = new javax.swing.JPanel();
        pnlTime = new javax.swing.JPanel();
        dateChooserFromDate = new com.toedter.calendar.JDateChooser();
        btnViewBill = new javax.swing.JButton();
        dateChooserToDate = new com.toedter.calendar.JDateChooser();
        pnlInfoBillInMonth = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblStatistics = new javax.swing.JTable();
        pnlFood = new javax.swing.JPanel();
        pnlShowFood = new javax.swing.JPanel();
        pnlLoadFood = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblFoods = new javax.swing.JTable();
        pnlOptionFood = new javax.swing.JPanel();
        btnAddFood = new javax.swing.JButton();
        btnDeleteFood = new javax.swing.JButton();
        btnUpdateFood = new javax.swing.JButton();
        btnNewFoods = new javax.swing.JButton();
        pnlInfoFood = new javax.swing.JPanel();
        pnlFoodDetails = new javax.swing.JPanel();
        lblFoodID = new javax.swing.JLabel();
        txtFoodID = new javax.swing.JTextField();
        lblFoodName = new javax.swing.JLabel();
        txtFoodName = new javax.swing.JTextField();
        lblFoodCategory = new javax.swing.JLabel();
        cboFoodCategory = new javax.swing.JComboBox<>();
        lblFoodPrice = new javax.swing.JLabel();
        spiFoodPrice = new javax.swing.JSpinner();
        pnlSearchFood = new javax.swing.JPanel();
        btnSearchFood = new javax.swing.JButton();
        txtSearchFood = new javax.swing.JTextField();
        btnListFood = new javax.swing.JButton();
        pnlCategory = new javax.swing.JPanel();
        pnlShowAccount1 = new javax.swing.JPanel();
        pnlLoadAccount1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblCategory = new javax.swing.JTable();
        pnlOptionAccount1 = new javax.swing.JPanel();
        btnAddCategory = new javax.swing.JButton();
        btnDeleteCategory = new javax.swing.JButton();
        btnUpdateCategory = new javax.swing.JButton();
        btnNewCategory = new javax.swing.JButton();
        pnlInfoFood2 = new javax.swing.JPanel();
        pnlFoodDetails2 = new javax.swing.JPanel();
        lblFoodID3 = new javax.swing.JLabel();
        txtCategoryID = new javax.swing.JTextField();
        lblFoodName2 = new javax.swing.JLabel();
        txtCategoryName = new javax.swing.JTextField();
        pnlAccount = new javax.swing.JPanel();
        pnlShowAccount = new javax.swing.JPanel();
        pnlLoadAccount = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblAccounts = new javax.swing.JTable();
        pnlOptionAccount = new javax.swing.JPanel();
        btnAddAccount = new javax.swing.JButton();
        btnDeleteAccount = new javax.swing.JButton();
        btnUpdateAccount = new javax.swing.JButton();
        btnViewAccount = new javax.swing.JButton();
        pnlInfoFood1 = new javax.swing.JPanel();
        pnlFoodDetails1 = new javax.swing.JPanel();
        lblFoodID2 = new javax.swing.JLabel();
        txtAccountID = new javax.swing.JTextField();
        lblFoodName1 = new javax.swing.JLabel();
        txtAccountsFullname = new javax.swing.JTextField();
        lblAccountsPassword = new javax.swing.JLabel();
        txtAccountsPassword = new javax.swing.JPasswordField();
        lblFoodCategory1 = new javax.swing.JLabel();
        cboAccountsRole = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1100, 600));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        pnlTime.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        pnlTime.setLayout(new java.awt.GridLayout(1, 2, 100, 40));

        dateChooserFromDate.setDateFormatString("dd/MM/yyyy");
        dateChooserFromDate.setMinimumSize(new java.awt.Dimension(50, 20));
        dateChooserFromDate.setPreferredSize(new java.awt.Dimension(50, 20));
        pnlTime.add(dateChooserFromDate);

        btnViewBill.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnViewBill.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sample/application/diagram.png"))); // NOI18N
        btnViewBill.setText("Thống kê");
        btnViewBill.setMaximumSize(new java.awt.Dimension(90, 69));
        btnViewBill.setMinimumSize(new java.awt.Dimension(90, 69));
        btnViewBill.setPreferredSize(new java.awt.Dimension(90, 69));
        btnViewBill.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewBillActionPerformed(evt);
            }
        });
        pnlTime.add(btnViewBill);

        dateChooserToDate.setDateFormatString("dd/MM/yyyy");
        dateChooserToDate.setMinimumSize(new java.awt.Dimension(50, 20));
        dateChooserToDate.setPreferredSize(new java.awt.Dimension(50, 20));
        pnlTime.add(dateChooserToDate);

        tblStatistics.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Bàn", "Ngày vào", "Ngày ra", "Giảm giá", "Tổng tiền"
            }
        ));
        jScrollPane4.setViewportView(tblStatistics);

        javax.swing.GroupLayout pnlInfoBillInMonthLayout = new javax.swing.GroupLayout(pnlInfoBillInMonth);
        pnlInfoBillInMonth.setLayout(pnlInfoBillInMonthLayout);
        pnlInfoBillInMonthLayout.setHorizontalGroup(
            pnlInfoBillInMonthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 1036, Short.MAX_VALUE)
        );
        pnlInfoBillInMonthLayout.setVerticalGroup(
            pnlInfoBillInMonthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 495, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout pnlRevenueLayout = new javax.swing.GroupLayout(pnlRevenue);
        pnlRevenue.setLayout(pnlRevenueLayout);
        pnlRevenueLayout.setHorizontalGroup(
            pnlRevenueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlInfoBillInMonth, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(pnlTime, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        pnlRevenueLayout.setVerticalGroup(
            pnlRevenueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlRevenueLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(pnlTime, javax.swing.GroupLayout.PREFERRED_SIZE, 43, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pnlInfoBillInMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        tblWrapperMain.addTab("Doanh thu", pnlRevenue);

        pnlFood.setMinimumSize(new java.awt.Dimension(1036, 472));

        pnlShowFood.setMinimumSize(new java.awt.Dimension(400, 450));
        pnlShowFood.setPreferredSize(new java.awt.Dimension(400, 450));

        tblFoods.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Tên sản phẩm", "Mã loại sản phẩm", "Giá tiền"
            }
        ));
        tblFoods.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblFoodsMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tblFoods);
        if (tblFoods.getColumnModel().getColumnCount() > 0) {
            tblFoods.getColumnModel().getColumn(2).setResizable(false);
        }

        javax.swing.GroupLayout pnlLoadFoodLayout = new javax.swing.GroupLayout(pnlLoadFood);
        pnlLoadFood.setLayout(pnlLoadFoodLayout);
        pnlLoadFoodLayout.setHorizontalGroup(
            pnlLoadFoodLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 670, Short.MAX_VALUE)
        );
        pnlLoadFoodLayout.setVerticalGroup(
            pnlLoadFoodLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 493, Short.MAX_VALUE)
        );

        pnlOptionFood.setMinimumSize(new java.awt.Dimension(320, 23));
        pnlOptionFood.setLayout(new java.awt.GridLayout(1, 4, 20, 20));

        btnAddFood.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnAddFood.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sample/application/plus.png"))); // NOI18N
        btnAddFood.setText("Thêm");
        btnAddFood.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddFoodActionPerformed(evt);
            }
        });
        pnlOptionFood.add(btnAddFood);

        btnDeleteFood.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnDeleteFood.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sample/application/rubbish-bin.png"))); // NOI18N
        btnDeleteFood.setText("Xóa");
        btnDeleteFood.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteFoodActionPerformed(evt);
            }
        });
        pnlOptionFood.add(btnDeleteFood);

        btnUpdateFood.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnUpdateFood.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sample/application/refresh.png"))); // NOI18N
        btnUpdateFood.setText("Sửa");
        btnUpdateFood.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateFoodActionPerformed(evt);
            }
        });
        pnlOptionFood.add(btnUpdateFood);

        btnNewFoods.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnNewFoods.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sample/application/new.png"))); // NOI18N
        btnNewFoods.setText("Tạo mới ");
        btnNewFoods.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewFoodsActionPerformed(evt);
            }
        });
        pnlOptionFood.add(btnNewFoods);

        javax.swing.GroupLayout pnlShowFoodLayout = new javax.swing.GroupLayout(pnlShowFood);
        pnlShowFood.setLayout(pnlShowFoodLayout);
        pnlShowFoodLayout.setHorizontalGroup(
            pnlShowFoodLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlLoadFood, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(pnlOptionFood, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        pnlShowFoodLayout.setVerticalGroup(
            pnlShowFoodLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlShowFoodLayout.createSequentialGroup()
                .addComponent(pnlLoadFood, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlOptionFood, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pnlInfoFood.setMaximumSize(new java.awt.Dimension(356, 224));
        pnlInfoFood.setMinimumSize(new java.awt.Dimension(356, 224));
        pnlInfoFood.setPreferredSize(new java.awt.Dimension(356, 224));

        pnlFoodDetails.setMinimumSize(new java.awt.Dimension(158, 140));
        pnlFoodDetails.setLayout(new java.awt.GridLayout(4, 2, 10, 20));

        lblFoodID.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblFoodID.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblFoodID.setText("Mã hàng:");
        pnlFoodDetails.add(lblFoodID);

        txtFoodID.setEditable(false);
        txtFoodID.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        pnlFoodDetails.add(txtFoodID);

        lblFoodName.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblFoodName.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblFoodName.setText("Tên hàng:");
        pnlFoodDetails.add(lblFoodName);

        txtFoodName.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        pnlFoodDetails.add(txtFoodName);

        lblFoodCategory.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblFoodCategory.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblFoodCategory.setText("Danh mục:");
        pnlFoodDetails.add(lblFoodCategory);

        pnlFoodDetails.add(cboFoodCategory);

        lblFoodPrice.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblFoodPrice.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblFoodPrice.setText("Giá:");
        pnlFoodDetails.add(lblFoodPrice);

        spiFoodPrice.setModel(new javax.swing.SpinnerNumberModel(0, 0, 20000000, 1));
        pnlFoodDetails.add(spiFoodPrice);

        pnlSearchFood.setMinimumSize(new java.awt.Dimension(356, 55));

        btnSearchFood.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnSearchFood.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sample/application/search.png"))); // NOI18N
        btnSearchFood.setText("Tìm");
        btnSearchFood.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchFoodActionPerformed(evt);
            }
        });

        txtSearchFood.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        txtSearchFood.setForeground(new java.awt.Color(153, 153, 153));
        txtSearchFood.setText("Nhập tên sản phẩm.");
        txtSearchFood.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));

        javax.swing.GroupLayout pnlSearchFoodLayout = new javax.swing.GroupLayout(pnlSearchFood);
        pnlSearchFood.setLayout(pnlSearchFoodLayout);
        pnlSearchFoodLayout.setHorizontalGroup(
            pnlSearchFoodLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlSearchFoodLayout.createSequentialGroup()
                .addComponent(txtSearchFood)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnSearchFood, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        pnlSearchFoodLayout.setVerticalGroup(
            pnlSearchFoodLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSearchFoodLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(pnlSearchFoodLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSearchFood, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearchFood, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        btnListFood.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnListFood.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sample/application/clipboard.png"))); // NOI18N
        btnListFood.setText("Danh sách sản phẩm");
        btnListFood.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListFoodActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlInfoFoodLayout = new javax.swing.GroupLayout(pnlInfoFood);
        pnlInfoFood.setLayout(pnlInfoFoodLayout);
        pnlInfoFoodLayout.setHorizontalGroup(
            pnlInfoFoodLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlSearchFood, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(pnlInfoFoodLayout.createSequentialGroup()
                .addGroup(pnlInfoFoodLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlFoodDetails, javax.swing.GroupLayout.DEFAULT_SIZE, 346, Short.MAX_VALUE)
                    .addComponent(btnListFood, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnlInfoFoodLayout.setVerticalGroup(
            pnlInfoFoodLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlInfoFoodLayout.createSequentialGroup()
                .addComponent(pnlFoodDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnListFood, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlSearchFood, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout pnlFoodLayout = new javax.swing.GroupLayout(pnlFood);
        pnlFood.setLayout(pnlFoodLayout);
        pnlFoodLayout.setHorizontalGroup(
            pnlFoodLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlFoodLayout.createSequentialGroup()
                .addComponent(pnlShowFood, javax.swing.GroupLayout.DEFAULT_SIZE, 670, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pnlInfoFood, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        pnlFoodLayout.setVerticalGroup(
            pnlFoodLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlShowFood, javax.swing.GroupLayout.DEFAULT_SIZE, 554, Short.MAX_VALUE)
            .addComponent(pnlInfoFood, javax.swing.GroupLayout.DEFAULT_SIZE, 554, Short.MAX_VALUE)
        );

        tblWrapperMain.addTab("Sản phẩm", pnlFood);

        pnlCategory.setMinimumSize(new java.awt.Dimension(1036, 472));

        pnlShowAccount1.setMinimumSize(new java.awt.Dimension(400, 450));
        pnlShowAccount1.setPreferredSize(new java.awt.Dimension(400, 450));

        tblCategory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã loại sản phẩm", "Tên loại sản phẩm"
            }
        ));
        tblCategory.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblCategoryMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblCategory);

        javax.swing.GroupLayout pnlLoadAccount1Layout = new javax.swing.GroupLayout(pnlLoadAccount1);
        pnlLoadAccount1.setLayout(pnlLoadAccount1Layout);
        pnlLoadAccount1Layout.setHorizontalGroup(
            pnlLoadAccount1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 670, Short.MAX_VALUE)
        );
        pnlLoadAccount1Layout.setVerticalGroup(
            pnlLoadAccount1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        pnlOptionAccount1.setLayout(new java.awt.GridLayout(1, 4, 20, 20));

        btnAddCategory.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnAddCategory.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sample/application/plus.png"))); // NOI18N
        btnAddCategory.setText("Thêm");
        btnAddCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddCategoryActionPerformed(evt);
            }
        });
        pnlOptionAccount1.add(btnAddCategory);

        btnDeleteCategory.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnDeleteCategory.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sample/application/rubbish-bin.png"))); // NOI18N
        btnDeleteCategory.setText("Xóa");
        btnDeleteCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteCategoryActionPerformed(evt);
            }
        });
        pnlOptionAccount1.add(btnDeleteCategory);

        btnUpdateCategory.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnUpdateCategory.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sample/application/refresh.png"))); // NOI18N
        btnUpdateCategory.setText("Sửa");
        btnUpdateCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateCategoryActionPerformed(evt);
            }
        });
        pnlOptionAccount1.add(btnUpdateCategory);

        btnNewCategory.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnNewCategory.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sample/application/new.png"))); // NOI18N
        btnNewCategory.setText("Tạo mới");
        btnNewCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewCategoryActionPerformed(evt);
            }
        });
        pnlOptionAccount1.add(btnNewCategory);

        javax.swing.GroupLayout pnlShowAccount1Layout = new javax.swing.GroupLayout(pnlShowAccount1);
        pnlShowAccount1.setLayout(pnlShowAccount1Layout);
        pnlShowAccount1Layout.setHorizontalGroup(
            pnlShowAccount1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlLoadAccount1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(pnlOptionAccount1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        pnlShowAccount1Layout.setVerticalGroup(
            pnlShowAccount1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlShowAccount1Layout.createSequentialGroup()
                .addComponent(pnlLoadAccount1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlOptionAccount1, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pnlInfoFood2.setMaximumSize(new java.awt.Dimension(356, 224));
        pnlInfoFood2.setMinimumSize(new java.awt.Dimension(356, 224));
        pnlInfoFood2.setPreferredSize(new java.awt.Dimension(356, 224));

        pnlFoodDetails2.setMaximumSize(new java.awt.Dimension(212, 60));
        pnlFoodDetails2.setMinimumSize(new java.awt.Dimension(212, 60));
        pnlFoodDetails2.setPreferredSize(new java.awt.Dimension(212, 60));
        pnlFoodDetails2.setLayout(new java.awt.GridLayout(2, 2, 10, 20));

        lblFoodID3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblFoodID3.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblFoodID3.setText("ID:");
        lblFoodID3.setMaximumSize(new java.awt.Dimension(6, 20));
        lblFoodID3.setMinimumSize(new java.awt.Dimension(6, 20));
        lblFoodID3.setPreferredSize(new java.awt.Dimension(6, 20));
        pnlFoodDetails2.add(lblFoodID3);

        txtCategoryID.setEditable(false);
        pnlFoodDetails2.add(txtCategoryID);

        lblFoodName2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblFoodName2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblFoodName2.setText("Tên danh mục:");
        lblFoodName2.setMaximumSize(new java.awt.Dimension(6, 20));
        lblFoodName2.setMinimumSize(new java.awt.Dimension(6, 20));
        lblFoodName2.setPreferredSize(new java.awt.Dimension(6, 20));
        pnlFoodDetails2.add(lblFoodName2);

        txtCategoryName.setMaximumSize(new java.awt.Dimension(6, 20));
        pnlFoodDetails2.add(txtCategoryName);

        javax.swing.GroupLayout pnlInfoFood2Layout = new javax.swing.GroupLayout(pnlInfoFood2);
        pnlInfoFood2.setLayout(pnlInfoFood2Layout);
        pnlInfoFood2Layout.setHorizontalGroup(
            pnlInfoFood2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlInfoFood2Layout.createSequentialGroup()
                .addComponent(pnlFoodDetails2, javax.swing.GroupLayout.DEFAULT_SIZE, 346, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlInfoFood2Layout.setVerticalGroup(
            pnlInfoFood2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlInfoFood2Layout.createSequentialGroup()
                .addComponent(pnlFoodDetails2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(454, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout pnlCategoryLayout = new javax.swing.GroupLayout(pnlCategory);
        pnlCategory.setLayout(pnlCategoryLayout);
        pnlCategoryLayout.setHorizontalGroup(
            pnlCategoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCategoryLayout.createSequentialGroup()
                .addComponent(pnlShowAccount1, javax.swing.GroupLayout.DEFAULT_SIZE, 670, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pnlInfoFood2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        pnlCategoryLayout.setVerticalGroup(
            pnlCategoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlShowAccount1, javax.swing.GroupLayout.DEFAULT_SIZE, 554, Short.MAX_VALUE)
            .addComponent(pnlInfoFood2, javax.swing.GroupLayout.DEFAULT_SIZE, 554, Short.MAX_VALUE)
        );

        tblWrapperMain.addTab("Danh mục", pnlCategory);

        pnlAccount.setMinimumSize(new java.awt.Dimension(1036, 472));

        pnlShowAccount.setMinimumSize(new java.awt.Dimension(400, 450));
        pnlShowAccount.setPreferredSize(new java.awt.Dimension(400, 450));

        tblAccounts.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Tài khoản", "Tên người dùng", "Loại tài khoản"
            }
        ));
        tblAccounts.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblAccountsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblAccounts);
        if (tblAccounts.getColumnModel().getColumnCount() > 0) {
            tblAccounts.getColumnModel().getColumn(1).setResizable(false);
            tblAccounts.getColumnModel().getColumn(2).setResizable(false);
        }

        javax.swing.GroupLayout pnlLoadAccountLayout = new javax.swing.GroupLayout(pnlLoadAccount);
        pnlLoadAccount.setLayout(pnlLoadAccountLayout);
        pnlLoadAccountLayout.setHorizontalGroup(
            pnlLoadAccountLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 670, Short.MAX_VALUE)
        );
        pnlLoadAccountLayout.setVerticalGroup(
            pnlLoadAccountLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        pnlOptionAccount.setLayout(new java.awt.GridLayout(1, 4, 20, 20));

        btnAddAccount.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnAddAccount.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sample/application/plus.png"))); // NOI18N
        btnAddAccount.setText("Thêm");
        btnAddAccount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddAccountActionPerformed(evt);
            }
        });
        pnlOptionAccount.add(btnAddAccount);

        btnDeleteAccount.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnDeleteAccount.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sample/application/rubbish-bin.png"))); // NOI18N
        btnDeleteAccount.setText("Xóa");
        btnDeleteAccount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteAccountActionPerformed(evt);
            }
        });
        pnlOptionAccount.add(btnDeleteAccount);

        btnUpdateAccount.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnUpdateAccount.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sample/application/refresh.png"))); // NOI18N
        btnUpdateAccount.setText("Sửa");
        btnUpdateAccount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateAccountActionPerformed(evt);
            }
        });
        pnlOptionAccount.add(btnUpdateAccount);

        btnViewAccount.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnViewAccount.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sample/application/new.png"))); // NOI18N
        btnViewAccount.setText("Tạo mới");
        btnViewAccount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewAccountActionPerformed(evt);
            }
        });
        pnlOptionAccount.add(btnViewAccount);

        javax.swing.GroupLayout pnlShowAccountLayout = new javax.swing.GroupLayout(pnlShowAccount);
        pnlShowAccount.setLayout(pnlShowAccountLayout);
        pnlShowAccountLayout.setHorizontalGroup(
            pnlShowAccountLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlLoadAccount, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(pnlOptionAccount, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        pnlShowAccountLayout.setVerticalGroup(
            pnlShowAccountLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlShowAccountLayout.createSequentialGroup()
                .addComponent(pnlLoadAccount, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlOptionAccount, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pnlInfoFood1.setMaximumSize(new java.awt.Dimension(356, 224));
        pnlInfoFood1.setMinimumSize(new java.awt.Dimension(356, 224));
        pnlInfoFood1.setPreferredSize(new java.awt.Dimension(356, 224));

        pnlFoodDetails1.setLayout(new java.awt.GridLayout(4, 2, 10, 20));

        lblFoodID2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblFoodID2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblFoodID2.setText("Tên tài khoản:");
        pnlFoodDetails1.add(lblFoodID2);

        txtAccountID.setEditable(false);
        pnlFoodDetails1.add(txtAccountID);

        lblFoodName1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblFoodName1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblFoodName1.setText("Tên hiển thị:");
        pnlFoodDetails1.add(lblFoodName1);
        pnlFoodDetails1.add(txtAccountsFullname);

        lblAccountsPassword.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblAccountsPassword.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblAccountsPassword.setText("Mật khẩu:");
        pnlFoodDetails1.add(lblAccountsPassword);
        pnlFoodDetails1.add(txtAccountsPassword);

        lblFoodCategory1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblFoodCategory1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblFoodCategory1.setText("Loại tài khoản:");
        pnlFoodDetails1.add(lblFoodCategory1);

        cboAccountsRole.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Chủ quán", "Nhân viên" }));
        pnlFoodDetails1.add(cboAccountsRole);

        javax.swing.GroupLayout pnlInfoFood1Layout = new javax.swing.GroupLayout(pnlInfoFood1);
        pnlInfoFood1.setLayout(pnlInfoFood1Layout);
        pnlInfoFood1Layout.setHorizontalGroup(
            pnlInfoFood1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlInfoFood1Layout.createSequentialGroup()
                .addComponent(pnlFoodDetails1, javax.swing.GroupLayout.DEFAULT_SIZE, 346, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlInfoFood1Layout.setVerticalGroup(
            pnlInfoFood1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlInfoFood1Layout.createSequentialGroup()
                .addComponent(pnlFoodDetails1, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(317, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout pnlAccountLayout = new javax.swing.GroupLayout(pnlAccount);
        pnlAccount.setLayout(pnlAccountLayout);
        pnlAccountLayout.setHorizontalGroup(
            pnlAccountLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAccountLayout.createSequentialGroup()
                .addComponent(pnlShowAccount, javax.swing.GroupLayout.DEFAULT_SIZE, 670, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pnlInfoFood1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        pnlAccountLayout.setVerticalGroup(
            pnlAccountLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlShowAccount, javax.swing.GroupLayout.DEFAULT_SIZE, 554, Short.MAX_VALUE)
            .addComponent(pnlInfoFood1, javax.swing.GroupLayout.DEFAULT_SIZE, 554, Short.MAX_VALUE)
        );

        tblWrapperMain.addTab("Tài khoản", pnlAccount);

        javax.swing.GroupLayout pnlWrapperTablePaneAdminLayout = new javax.swing.GroupLayout(pnlWrapperTablePaneAdmin);
        pnlWrapperTablePaneAdmin.setLayout(pnlWrapperTablePaneAdminLayout);
        pnlWrapperTablePaneAdminLayout.setHorizontalGroup(
            pnlWrapperTablePaneAdminLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tblWrapperMain)
        );
        pnlWrapperTablePaneAdminLayout.setVerticalGroup(
            pnlWrapperTablePaneAdminLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tblWrapperMain)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlWrapperTablePaneAdmin, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlWrapperTablePaneAdmin, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        this.dispose();
        new CoffeeApplicationForAdmin(this.dtoAccounts);
    }//GEN-LAST:event_formWindowClosing

    private void tblAccountsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblAccountsMouseClicked
        int pos = tblAccounts.getSelectedRow();
        AccountsDTO dto = this.listAccounts.get(pos);
        txtAccountID.setEditable(false);
        txtAccountID.setText(dto.getUsername());
        txtAccountsFullname.setText(dto.getFullname());
        txtAccountsPassword.setText(dto.getPassword());
        if (dto.getType() == 1) {
            cboAccountsRole.setSelectedIndex(0);
        } else {
            cboAccountsRole.setSelectedIndex(1);
        }
    }//GEN-LAST:event_tblAccountsMouseClicked

    private void btnViewBillActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewBillActionPerformed
        Date fromDate = dateChooserFromDate.getDate();
        Date toDate = dateChooserToDate.getDate();
        loadStatisticsList(fromDate, toDate);
    }//GEN-LAST:event_btnViewBillActionPerformed

    private void btnNewFoodsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewFoodsActionPerformed
        try {
            checkPressButtonCreateNewProduct = true;
            daoFoods = new FoodsDAO();
            int maxIdFood = 0;
            maxIdFood = daoFoods.getMaxIdFood();
            txtFoodID.setText(Integer.toString(maxIdFood + 1));
            txtFoodName.setText("");
            cboFoodCategory.setSelectedIndex(0);
            spiFoodPrice.setValue(0);
        } catch (SQLException | ClassNotFoundException ex) {
            Logger.getLogger(Coffee.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnNewFoodsActionPerformed

    private void tblFoodsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblFoodsMouseClicked
        int pos = tblFoods.getSelectedRow();
        dtoFoods = this.listFoods.get(pos);
        int id = dtoFoods.getId();
        String name = dtoFoods.getName();
        String idFoodCategory = dtoFoods.getIdFoodCategory();
        float price = dtoFoods.getPrice();
        txtFoodID.setText(Integer.toString(id));
        txtFoodName.setText(name);
        if (this.listCategory != null) {
            for (int i = 0; i < this.listCategory.size(); i++) {
                if (this.listCategory.get(i).getId().equals(idFoodCategory)) {
                    cboFoodCategory.setSelectedIndex(i);
                    break;
                }
            }
        }
        spiFoodPrice.setValue((int) price);
    }//GEN-LAST:event_tblFoodsMouseClicked

    private void btnAddFoodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddFoodActionPerformed
        if (checkPressButtonCreateNewProduct) {
            try {
                daoFoods = new FoodsDAO();
                String name = txtFoodName.getText();
                if (name.trim().length() < 1) {
                    txtFoodName.setText("");
                    JOptionPane.showMessageDialog(this, "Vui lòng điền tên sản phẩm.");
                    return;
                }
                for (FoodsDTO listFood : listFoods) {
                    if (listFood.getName().equals(name)) {
                        txtFoodName.setText("");
                        JOptionPane.showMessageDialog(this, "Sản phẩm đã tồn tại.");
                        return;
                    }
                }
                String idFoodCategory = null;
                String tmpDdFoodCategory = (String) cboFoodCategory.getSelectedItem();
                if (this.listCategory != null) {
                    for (int i = 0; i < this.listCategory.size(); i++) {
                        if (this.listCategory.get(i).getName().equals(tmpDdFoodCategory)) {
                            idFoodCategory = this.listCategory.get(i).getId();
                            break;
                        }
                    }
                }
                int tmpPrice = (int) spiFoodPrice.getValue();
                float price = tmpPrice;
                if (price == 0) {
                    spiFoodPrice.setValue(0);
                    JOptionPane.showMessageDialog(this, "Vui lòng điền giá tiền sản phẩm.");
                    return;
                }
                boolean result = daoFoods.insertFood(name, idFoodCategory, price);
                if (result) {
                    txtFoodID.setText("");
                    txtFoodName.setText("");
                    cboFoodCategory.setSelectedIndex(0);
                    spiFoodPrice.setValue(0);
                    load();
                    JOptionPane.showMessageDialog(this, "Thêm sản phẩm thành công.");
                }
            } catch (SQLException | ClassNotFoundException ex) {
                Logger.getLogger(Coffee.class.getName()).log(Level.SEVERE, null, ex);
            }
            checkPressButtonCreateNewProduct = false;
        } else {
            JOptionPane.showMessageDialog(this, "Vui lòng bấm nút tạo mới trước khi thêm.");
        }
    }//GEN-LAST:event_btnAddFoodActionPerformed

    private void btnDeleteFoodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteFoodActionPerformed
        int pos = tblFoods.getSelectedRow();
        dtoFoods = this.listFoods.get(pos);
        int id = dtoFoods.getId();
        daoFoods = new FoodsDAO();
        try {
            boolean result = daoFoods.deleteFood(id);
            if (result) {
                txtFoodID.setText("");
                txtFoodName.setText("");
                cboFoodCategory.setSelectedIndex(0);
                spiFoodPrice.setValue(0);
                load();
                JOptionPane.showMessageDialog(this, "Xóa sản phẩm thành công.");
            }
        } catch (SQLException | ClassNotFoundException ex) {
            Logger.getLogger(Coffee.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnDeleteFoodActionPerformed

    private void btnUpdateFoodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateFoodActionPerformed
        try {
            int pos = tblFoods.getSelectedRow();
            dtoFoods = this.listFoods.get(pos);
            int id = Integer.parseInt(txtFoodID.getText());
            String name = txtFoodName.getText();
            if (name.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Vui lòng điền tên sản phẩm.");
                return;
            }
            String nameFoodCategory = (String) cboFoodCategory.getSelectedItem();
            String idFoodCategory = null;
            for (FoodCategoryDTO foodCategoryDTO : listCategory) {
                if (foodCategoryDTO.getName().equals(nameFoodCategory)) {
                    idFoodCategory = foodCategoryDTO.getId();
                }
            }
            int tmpPrice = (int) spiFoodPrice.getValue();
            if (tmpPrice == 0) {
                JOptionPane.showMessageDialog(this, "Vui lòng điền giá sản phẩm.");
                return;
            }
            float price = tmpPrice;
            daoFoods = new FoodsDAO();
            boolean result = daoFoods.updateFood(id, name, idFoodCategory, price);
            if (result) {
                txtFoodID.setText("");
                txtFoodName.setText("");
                cboFoodCategory.setSelectedIndex(0);
                spiFoodPrice.setValue(0);
                load();
                JOptionPane.showMessageDialog(this, "Sửa sản phẩm thành công.");
            }
        } catch (SQLException | ClassNotFoundException ex) {
            Logger.getLogger(Coffee.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnUpdateFoodActionPerformed

    private void btnSearchFoodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchFoodActionPerformed
        try {
            String valueSearch = txtSearchFood.getText();
            if (valueSearch.trim().length() > 0) {
                daoFoods = new FoodsDAO();
                this.listFoodSearchByName = daoFoods.searchFoodsByName(valueSearch);
                if (this.listFoodSearchByName != null) {
                    loadListFoodByValueSearch();
                }
            }
        } catch (SQLException | ClassNotFoundException ex) {
            Logger.getLogger(Coffee.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnSearchFoodActionPerformed

    private void btnListFoodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListFoodActionPerformed
        loadListFood();
    }//GEN-LAST:event_btnListFoodActionPerformed

    private void btnAddAccountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddAccountActionPerformed
        String username = null;
        if (checkPressButtonCreateNewAccount) {
            try {
                daoAccounts = new AccountsDAO();
                username = txtAccountID.getText();
                if (username.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Vui lòng điền tên tài khoản.");
                    return;
                }
                String fullname = txtAccountsFullname.getText();
                if (fullname.trim().length() < 1) {
                    JOptionPane.showMessageDialog(this, "Vui lòng điền tên hiển thị.");
                    return;
                }
                String password = txtAccountsPassword.getText();
                if (password.trim().length() < 1) {
                    JOptionPane.showMessageDialog(this, "Vui lòng điền mật khẩu.");
                    return;
                }
                int type = cboAccountsRole.getSelectedIndex();
                boolean result = daoAccounts.insertAccounts(username, fullname, password, type + 1);
                if (result) {
                    txtAccountID.setText("");
                    txtAccountsFullname.setText("");
                    txtAccountsPassword.setText("");
                    cboAccountsRole.setSelectedIndex(0);
                    loadTableAccount();
                    JOptionPane.showMessageDialog(this, "Thêm tài khoản thành công.");
                }
            } catch (SQLException | ClassNotFoundException ex) {
                if (ex.getMessage().contains("The duplicate key value is (" + username + ")")) {
                    txtAccountID.setText("");
                    txtAccountsFullname.setText("");
                    txtAccountsPassword.setText("");
                    cboAccountsRole.setSelectedIndex(0);
                    JOptionPane.showMessageDialog(this, "Tài khoản đã tồn tại.");
                    return;
                }
            }
            checkPressButtonCreateNewAccount = false;
        } else {
            JOptionPane.showMessageDialog(this, "Vui lòng bấm nút tạo mới trước khi thêm.");
        }
    }//GEN-LAST:event_btnAddAccountActionPerformed

    private void btnViewAccountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewAccountActionPerformed
        checkPressButtonCreateNewAccount = true;
        txtAccountID.setText("");
        txtAccountID.setEditable(true);
        txtAccountsFullname.setText("");
        txtAccountsPassword.setText("");
        cboAccountsRole.setSelectedIndex(0);
    }//GEN-LAST:event_btnViewAccountActionPerformed

    private void btnDeleteAccountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteAccountActionPerformed
        try {
            int pos = tblAccounts.getSelectedRow();
            AccountsDTO dto = this.listAccounts.get(pos);
            String username = dto.getUsername();
            String password = dto.getPassword();
            for (AccountsDTO listAccount : listAccounts) {
                if (listAccount.getUsername().equals(username) && listAccount.getPassword().equals(password)) {
                    txtAccountID.setText("");
                    txtAccountsFullname.setText("");
                    txtAccountsPassword.setText("");
                    cboAccountsRole.setSelectedIndex(0);
                    JOptionPane.showMessageDialog(this, "Xóa tài khoản thất bại.");
                    return;
                }
            }
            daoAccounts = new AccountsDAO();
            boolean result = daoAccounts.deleteAccounts(username, password);
            if (result) {
                txtAccountID.setText("");
                txtAccountsFullname.setText("");
                txtAccountsPassword.setText("");
                cboAccountsRole.setSelectedIndex(0);
                loadTableAccount();
                JOptionPane.showMessageDialog(this, "Xóa tài khoản thành công");
            }
        } catch (SQLException | ClassNotFoundException ex) {
            Logger.getLogger(Coffee.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnDeleteAccountActionPerformed

    private void btnUpdateAccountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateAccountActionPerformed
        try {
            String username = txtAccountID.getText();
            if (username.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Vui lòng điền tên tài khoản.");
                return;
            }
            String fullname = txtAccountsFullname.getText();
            if (fullname.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Vui lòng điền tên hiển thị.");
                return;
            }
            String password = txtAccountsPassword.getText();
            if (password.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Vui lòng điền mật khẩu.");
                return;
            }
            int type = cboAccountsRole.getSelectedIndex();
            daoAccounts = new AccountsDAO();
            boolean result = daoAccounts.updateAccounts(username, fullname, password, "", type + 1);
            if (result) {
                txtAccountID.setText("");
                txtAccountsFullname.setText("");
                txtAccountsPassword.setText("");
                cboAccountsRole.setSelectedIndex(0);
                loadTableAccount();
                JOptionPane.showMessageDialog(this, "Sửa tài khoản thành công.");
            }
        } catch (SQLException | ClassNotFoundException ex) {
            Logger.getLogger(Coffee.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnUpdateAccountActionPerformed

    private void tblCategoryMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblCategoryMouseClicked
        int pos = tblCategory.getSelectedRow();
        dtoFoodCategory = this.listCategory.get(pos);
        txtCategoryID.setText(dtoFoodCategory.getId());
        txtCategoryID.setEditable(false);
        txtCategoryName.setText(dtoFoodCategory.getName());
    }//GEN-LAST:event_tblCategoryMouseClicked

    private void btnNewCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewCategoryActionPerformed
        checkPressButtonCreateNewCategory = true;
        txtCategoryID.setText("");
        txtCategoryID.setEditable(true);
        txtCategoryName.setText("");
    }//GEN-LAST:event_btnNewCategoryActionPerformed

    private void btnAddCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddCategoryActionPerformed
        if (checkPressButtonCreateNewCategory) {
            daoFoodCategory = new FoodCategoryDAO();
            String categoryId = txtCategoryID.getText();
            if (categoryId.trim().length() < 1) {
                txtCategoryID.setText("");
                JOptionPane.showMessageDialog(this, "Vui lòng điền mã sản phẩm.");
                return;
            }
            categoryId = categoryId.toUpperCase();
            if (!categoryId.matches("[A-Z]{1}")) {
                txtCategoryID.setText("");
                JOptionPane.showMessageDialog(this, "Vui lòng điền 1 chữ cái đầu của loại sản phẩm.");
                return;
            }
            for (FoodCategoryDTO dto : listCategory) {
                if (dto.getId().equals(categoryId)) {
                    txtCategoryID.setText("");
                    JOptionPane.showMessageDialog(this, "Mã loại sản phẩm đã tồn tại.");
                    return;
                }
            }
            String categoryName = txtCategoryName.getText();
            if (categoryName.isEmpty()) {
                txtCategoryName.setText("");
                JOptionPane.showMessageDialog(this, "Vui lòng điền tên loại sản phẩm.");
                return;
            }
            try {
                boolean result = daoFoodCategory.insertCategory(categoryId, categoryName);
                if (result) {
                    txtCategoryID.setText("");
                    txtCategoryName.setText("");
                    load();
                    JOptionPane.showMessageDialog(this, "Thêm tài khoản thành công.");
                }
                checkPressButtonCreateNewCategory = false;
            } catch (SQLException | ClassNotFoundException ex) {
                Logger.getLogger(Coffee.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Vui lòng bấm nút tạo mới trước khi thêm.");
        }
    }//GEN-LAST:event_btnAddCategoryActionPerformed

    private void btnDeleteCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteCategoryActionPerformed
        int pos = tblCategory.getSelectedRow();
        dtoFoodCategory = this.listCategory.get(pos);
        daoFoodCategory = new FoodCategoryDAO();
        try {
            boolean result = daoFoodCategory.deleteCategory(dtoFoodCategory.getId());
            if (result) {
                txtCategoryID.setText("");
                txtCategoryName.setText("");
                JOptionPane.showMessageDialog(this, "Xóa danh mục sản phẩm thành công.");
                load();
            }
        } catch (SQLException | ClassNotFoundException ex) {
            if (ex.getMessage().contains("The conflict occurred in database \"QuanLyQuanCafe\", table \"dbo.Foods\", column 'idFoodCategory'")) {
                txtCategoryID.setText("");
                txtCategoryName.setText("");
                JOptionPane.showMessageDialog(this, "Vui lòng xóa sản phẩm của danh mục trước.");
            }
        }
    }//GEN-LAST:event_btnDeleteCategoryActionPerformed

    private void btnUpdateCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateCategoryActionPerformed
        int pos;
        pos = tblCategory.getSelectedRow();
        if (pos > -1) {
            daoFoodCategory = new FoodCategoryDAO();
            String categoryId = txtCategoryID.getText();
            String categoryName = txtCategoryName.getText();
            if (categoryName.trim().length() < 1) {
                txtCategoryName.setText("");
                JOptionPane.showMessageDialog(this, "Vui lòng điền tên loại sản phẩm.");
                return;
            }
            for (FoodCategoryDTO dto : listCategory) {
                if (dto.getName().equals(categoryName)) {
                    txtCategoryName.setText("");
                    JOptionPane.showMessageDialog(this, "Tên loại sản phẩm tồn tại.");
                    return;
                }
            }
            try {
                boolean result = daoFoodCategory.updateCategory(categoryId, categoryName);
                if (result) {
                    txtCategoryID.setText("");
                    txtCategoryName.setText("");
                    load();
                    JOptionPane.showMessageDialog(this, "Sửa loại sản phẩm thành công.");

                }
            } catch (SQLException | ClassNotFoundException ex) {
                Logger.getLogger(Coffee.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn sản phẩm để chỉnh sữa.");
        }
    }//GEN-LAST:event_btnUpdateCategoryActionPerformed

    private void loadTextFocusSearch() {
        txtSearchFood.addFocusListener(new FocusListener() {
            @Override
            public void focusGained(FocusEvent fe) {
                if (txtSearchFood.getText().equals("Nhập tên sản phẩm.")) {
                    txtSearchFood.setText("");
                    txtSearchFood.setForeground(Color.black);
                    txtSearchFood.setFont(new Font("Tahoma", 0, 11));
                }
            }

            @Override
            public void focusLost(FocusEvent fe) {
                if (txtSearchFood.getText().isEmpty()) {
                    txtSearchFood.setText("Nhập tên sản phẩm.");
                    txtSearchFood.setForeground(Color.lightGray);
                    txtSearchFood.setFont(new Font("Tahoma", 2, 11));
                }
            }
        });
    }

    private void loadCategory() {
        try {
            daoFoodCategory = new FoodCategoryDAO();
            listCategory = daoFoodCategory.loadListCategory();
            if (listCategory != null) {
                cboFoodCategory.removeAllItems();
                tblCategory.removeAll();
                headerTable = new Vector<>();
                headerTable.add("Mã loại sản phẩm");
                headerTable.add("Tên loại sản phẩm");
                dataTable = new Vector<>();
                listCategory.forEach((foodCategoryDTO) -> {
                    cboFoodCategory.addItem(foodCategoryDTO.getName());
                    Vector row = new Vector<>();
                    row.add(foodCategoryDTO.getId());
                    row.add(foodCategoryDTO.getName());
                    dataTable.add(row);
                });
                categoryModel = (DefaultTableModel) tblCategory.getModel();
                categoryModel.setDataVector(dataTable, headerTable);
                tblCategory.updateUI();
            }
        } catch (SQLException | ClassNotFoundException ex) {
            Logger.getLogger(Coffee.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void loadListFood() {
        tblFoods.removeAll();
        daoFoods = new FoodsDAO();
        try {
            listFoods = daoFoods.loadListFood();
            if (listFoods != null) {
                headerTable = new Vector<>();
                headerTable.add("Tên sản phẩm");
                headerTable.add("Mã loại sản phẩm");
                headerTable.add("Giá tiền");
                dataTable = new Vector<>();
                for (FoodsDTO listFood : listFoods) {
                    Vector row = new Vector<>();
                    row.add(listFood.getName());
                    row.add(listFood.getIdFoodCategory());
                    row.add(listFood.getPrice());
                    dataTable.add(row);
                }
                listFoodsModel = (DefaultTableModel) tblFoods.getModel();
                listFoodsModel.setDataVector(dataTable, headerTable);
                tblFoods.updateUI();
            }
        } catch (SQLException | ClassNotFoundException ex) {
            Logger.getLogger(Coffee.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void loadListFoodByValueSearch() {
        tblFoods.removeAll();
        headerTable = new Vector<>();
        headerTable.add("Tên sản phẩm");
        headerTable.add("Mã loại sản phẩm");
        headerTable.add("Giá tiền");
        dataTable = new Vector<>();
        for (FoodsDTO listFood : listFoodSearchByName) {
            Vector row = new Vector<>();
            row.add(listFood.getName());
            row.add(listFood.getIdFoodCategory());
            row.add(listFood.getPrice());
            dataTable.add(row);
        }
        listFoodsModel = (DefaultTableModel) tblFoods.getModel();
        listFoodsModel.setDataVector(dataTable, headerTable);
        tblFoods.updateUI();
    }

    private void loadStatisticsList(Date fromD, Date toD) {
        try {
            dateChooserFromDate.setDate(fromD);
            dateChooserToDate.setDate(toD);
            daoStatistics = new StatisticsDAO();
            java.sql.Date fromDateSQL = new java.sql.Date(fromD.getTime());
            java.sql.Date toDateSQL = new java.sql.Date(toD.getTime());
            listStatistics = daoStatistics.loadStatistics(fromDateSQL, toDateSQL);
            if (listStatistics != null) {
                headerTable = new Vector<>();
                headerTable.add("Bàn");
                headerTable.add("Ngày vào");
                headerTable.add("Ngày ra");
                headerTable.add("Giảm giá");
                headerTable.add("Tổng tiền");
                dataTable = new Vector();
                for (StatisticsDTO listStatistic : listStatistics) {
                    Vector row = new Vector();
                    row.add(listStatistic.getTableName());
                    row.add(listStatistic.getCheckIn());
                    row.add(listStatistic.getCheckOut());
                    row.add(listStatistic.getDiscount());
                    row.add(listStatistic.getTotalPrice());
                    dataTable.add(row);
                }
                statisticsModel = (DefaultTableModel) tblStatistics.getModel();
                statisticsModel.setDataVector(dataTable, headerTable);
            }
            tblStatistics.updateUI();
        } catch (ClassNotFoundException | SQLException e) {
        }
    }

    private void loadTableAccount() {
        try {
            daoAccounts = new AccountsDAO();
            this.listAccounts = daoAccounts.loadAccountList();
            if (this.listAccounts != null) {
                headerTable = new Vector<>();
                headerTable.add("Tài khoản");
                headerTable.add("Tên đầy đủ");
                headerTable.add("Loại tài khoản");
                dataTable = new Vector<>();
                for (AccountsDTO listAccount : this.listAccounts) {
                    Vector row = new Vector();
                    row.add(listAccount.getUsername());
                    row.add(listAccount.getFullname());
                    if (listAccount.getType() == 1) {
                        row.add("Chủ quán");
                    }
                    row.add("Nhận viên");
                    dataTable.add(row);
                }
                accountModel = (DefaultTableModel) tblAccounts.getModel();
                accountModel.setDataVector(dataTable, headerTable);
                tblAccounts.updateUI();
            } else {
                JOptionPane.showMessageDialog(this, "Không tìm thấy thông tin tài khoản.");
            }
        } catch (SQLException | ClassNotFoundException ex) {
            Logger.getLogger(Coffee.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Coffee.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Coffee().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddAccount;
    private javax.swing.JButton btnAddCategory;
    private javax.swing.JButton btnAddFood;
    private javax.swing.JButton btnDeleteAccount;
    private javax.swing.JButton btnDeleteCategory;
    private javax.swing.JButton btnDeleteFood;
    private javax.swing.JButton btnListFood;
    private javax.swing.JButton btnNewCategory;
    private javax.swing.JButton btnNewFoods;
    private javax.swing.JButton btnSearchFood;
    private javax.swing.JButton btnUpdateAccount;
    private javax.swing.JButton btnUpdateCategory;
    private javax.swing.JButton btnUpdateFood;
    private javax.swing.JButton btnViewAccount;
    private javax.swing.JButton btnViewBill;
    private javax.swing.JComboBox<String> cboAccountsRole;
    private javax.swing.JComboBox<String> cboFoodCategory;
    private com.toedter.calendar.JDateChooser dateChooserFromDate;
    private com.toedter.calendar.JDateChooser dateChooserToDate;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel lblAccountsPassword;
    private javax.swing.JLabel lblFoodCategory;
    private javax.swing.JLabel lblFoodCategory1;
    private javax.swing.JLabel lblFoodID;
    private javax.swing.JLabel lblFoodID2;
    private javax.swing.JLabel lblFoodID3;
    private javax.swing.JLabel lblFoodName;
    private javax.swing.JLabel lblFoodName1;
    private javax.swing.JLabel lblFoodName2;
    private javax.swing.JLabel lblFoodPrice;
    private javax.swing.JPanel pnlAccount;
    private javax.swing.JPanel pnlCategory;
    private javax.swing.JPanel pnlFood;
    private javax.swing.JPanel pnlFoodDetails;
    private javax.swing.JPanel pnlFoodDetails1;
    private javax.swing.JPanel pnlFoodDetails2;
    private javax.swing.JPanel pnlInfoBillInMonth;
    private javax.swing.JPanel pnlInfoFood;
    private javax.swing.JPanel pnlInfoFood1;
    private javax.swing.JPanel pnlInfoFood2;
    private javax.swing.JPanel pnlLoadAccount;
    private javax.swing.JPanel pnlLoadAccount1;
    private javax.swing.JPanel pnlLoadFood;
    private javax.swing.JPanel pnlOptionAccount;
    private javax.swing.JPanel pnlOptionAccount1;
    private javax.swing.JPanel pnlOptionFood;
    private javax.swing.JPanel pnlRevenue;
    private javax.swing.JPanel pnlSearchFood;
    private javax.swing.JPanel pnlShowAccount;
    private javax.swing.JPanel pnlShowAccount1;
    private javax.swing.JPanel pnlShowFood;
    private javax.swing.JPanel pnlTime;
    private javax.swing.JPanel pnlWrapperTablePaneAdmin;
    private javax.swing.JSpinner spiFoodPrice;
    private javax.swing.JTable tblAccounts;
    private javax.swing.JTable tblCategory;
    private javax.swing.JTable tblFoods;
    private javax.swing.JTable tblStatistics;
    private javax.swing.JTabbedPane tblWrapperMain;
    private javax.swing.JTextField txtAccountID;
    private javax.swing.JTextField txtAccountsFullname;
    private javax.swing.JPasswordField txtAccountsPassword;
    private javax.swing.JTextField txtCategoryID;
    private javax.swing.JTextField txtCategoryName;
    private javax.swing.JTextField txtFoodID;
    private javax.swing.JTextField txtFoodName;
    private javax.swing.JTextField txtSearchFood;
    // End of variables declaration//GEN-END:variables
}
